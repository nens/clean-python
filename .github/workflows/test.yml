name: Linux

# Run on PR requests. And on master itself.
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: Test, Linux, Python ${{ matrix.python }}, ${{ matrix.versions }}
    runs-on: ubuntu-latest
    env:
      extras: "fastapi,auth,celery,fluentbit,sql,sql-sync,s3,s3-sync,api-client,amqp,nanoid,test"
    strategy:
      fail-fast: false
      matrix:
        include:
          - python: "3.10"
            pins: "psycopg2-binary==2.9.3"
            versions: "minimum"
          - python: "3.11"
            pins: "psycopg2-binary"
            versions: "minimum"
          - python: "3.12"
            pins: "psycopg2-binary"
            versions: "latest"
          - python: "3.13"
            pins: "psycopg2-binary"
            versions: "latest"

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

      s3:
        image: minio/minio:edge-cicd
        env:
          MINIO_DOMAIN: localhost  # virtual hosted-style access
          MINIO_ROOT_USER: cleanpython
          MINIO_ROOT_PASSWORD: cleanpython
        ports:
          - 9000:9000

      rabbitmq:
        image: "rabbitmq:3-alpine"
        env:
          RABBITMQ_DEFAULT_USER: "cleanpython"
          RABBITMQ_DEFAULT_PASS: "cleanpython"
          RABBITMQ_DEFAULT_VHOST: "cleanpython"
        ports:
          - "5672:5672"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          allow-prereleases: ${{ matrix.allow-prereleases || false }}

      - name: Install python dependencies
        run: |
          pip install --disable-pip-version-check --upgrade pip setuptools packaging pip-tools

      - name: Compute minimum requirement constraints from pyproject.toml
        run: |
          pip install -e . --no-deps
          python scripts/extract_minimum_requirements.py clean_python[$extras] > constraints.txt
        if: matrix.versions == 'minimum'

      - name: Compile and install requirements
        run: |
          touch constraints.txt
          pip-compile --extra=$extras -c constraints.txt -o requirements.txt --no-header --no-annotate --strip-extras
          pip install -r requirements.txt ${{ matrix.pins }}

      - name: Run tests
        run: pytest tests --cov

      - name: Wait for postgres
        run: scripts/wait-for-postgres.sh
        env:
          POSTGRES_URL: 'postgres:postgres@localhost:5432'
        timeout-minutes: 1

      - name: Run integration tests
        run: pytest integration_tests
        env:
          POSTGRES_URL: 'postgres:postgres@localhost:5432'
          S3_URL: 'http://localhost:9000'
